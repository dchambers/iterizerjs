{"name":"IterizerJs","tagline":"Expressive & concise code using ES6 iterables","body":"IterizerJs makes it easier to write code that makes extensive use of ES6 iterables. Banish the arcane C-style `for` loop, and write cleaner, more expressive and concise code instead.\r\n\r\nWhy you might want to use IterizerJs:\r\n\r\n  * **More Concise Code**: ES6 Iterables/Generators + ES5 Array Methods + IterizerJs = More Expressive & More Concise code.\r\n  * **Better Functional Re-use**: Generator Funcitons combined with the IterizerJs's `limit()` method lead to higher code re-use at the functional level.\r\n  * **Project Euler Hardened**: IterizerJs was discovered by attempting to solve the first ten problems in [Project Euler](https://projecteuler.net/) using ES6 iterables/generators and the ES5 `Array` methods.\r\n\r\nSee the [GitHub page](https://github.com/dchambers/iterizerjs) for details on where you can use it, and how to install it.\r\n\r\n\r\n## Using IterizerJs\r\n\r\nIterizerJs can be used with CommonJs, AMD or just plain vanilla JavaScript. In CommonJs, for example, we could write code like this:\r\n\r\n```\r\nvar it = require('iterizerjs');\r\n\r\n// find the sum of all numbers from 1 to 10\r\nit.range(10).sum();\r\n```\r\n\r\nUnlike library code that should not pollute the global namespace, app code may prefer to _install_ IterizerJs so that it's functions can be accessed globally, for example:\r\n\r\n```\r\nvar it = require('iterizerjs');\r\nit.install();\r\n\r\n// find the sum of all numbers from 1 to 10\r\nrange(10).sum();\r\n```\r\n\r\nAll examples from this point on will assume that the `install()` method has been called, and that all IterizerJs methods are available globally.\r\n\r\n\r\n## Counted Loops\r\n\r\nThanks to ES6, you will never need to write an arcane C-style `for` loop again. Instead, you can write code like this:\r\n\r\n```\r\nfor(var n of range(10)) {\r\n\t// do something with the numbers from 1 to 10\r\n}\r\n```\r\n\r\nUnlike C, Java & JavaScript, etc, which are zero-based, the provided `range()` method is one-based, since zero based counting normally only makes sense if you are doing pointer arithmetic, or if you are using old-style `for` loops to index zero-based arrays. Since `for...of` and `for...in` allow arrays to be iterated without maintaining an index, and since real-world problems are normally one based, the `range()` functions start from one unless instructed otherwise.\r\n\r\nTo iterate the numbers 0 to 9, we could instead write:\r\n\r\n```\r\nfor(var n of range(0, 9)) {\r\n\t// do something...\r\n}\r\n```\r\n\r\nwe can count down from 10 to 1 by inverting the arguments:\r\n\r\n```\r\nfor(var n of range(10, 1)) {\r\n\t// do something...\r\n}\r\n```\r\n\r\nor we could iterate only even numbers from 2 to 10 by providing a `step` argument, for example:\r\n\r\n```\r\nfor(var n of range(2, 10, 2)) {\r\n\t// do something with the numbers 2, 4, 6, 8, 10\r\n}\r\n```\r\n\r\n\r\n## ES5 Array Methods\r\n\r\nIterizerJs provides implementations of the ES5 Array methods, `map()`, `filter()`, `every()`, `some()` & `reduce()`, that operate on _iterables_, and which themselves return an _iterable_. These can be chained together to produce concise yet descriptive code, such as:\r\n\r\n```\r\nrange(-5, 5).filter(isGreaterThan(0)).map(times(10));\r\n```\r\n\r\n\r\n## Limiting what an iterable object or generator function returns.\r\n\r\nWhereas with normal functions, it is often necesarry to create multiple variants of a function depending on what you need it to return, with ES6 generator functions it is often easier to produce functions that return all possible results, and then limit how long they run for externally. To help with this, a `limit()` method is provided that can be used as follows:\r\n\r\n```\r\n// display the first 5 prime numbers\r\nprimes().limit(5);\r\n```\r\n\r\nOr to instead display the 5th to 10th prime numbers we could write:\r\n\r\n```\r\nprimes().limit(5, 10);\r\n```\r\n\r\nAlternatively, to display all primes whose value is less than 100, we can write:\r\n\r\n```\r\nprimes().limit(isLessThan(100));\r\n```\r\n\r\nTo show exactly the 100th prime we can write:\r\n\r\n```\r\nprimes().limit(100,100);\r\n```\r\n\r\nor better yet, use the `nthItem()` convenience method:\r\n\r\n```\r\nprimes().nthItem(100);\r\n```\r\n\r\nSimilarly, to get the first item we can use the `first()` method as follows:\r\n\r\n```\r\nprimes().first();\r\n```\r\n\r\n## Filters\r\n\r\nIterizerJs comes with a number of helpful filter functions that can be used with the `filter()` and `limit()` methods. These include the numeric filters:\r\n\r\n  * `isLessThan(num)`\r\n  * `isLessThanOrEqualTo(num)`\r\n  * `isGreaterThan(num)`\r\n  * `isGreaterThanOrEqualTo(num)`\r\n\r\nand the string based filters:\r\n\r\n  * `equals(str)`\r\n  * `beginsWith(str)`\r\n  * `endsWith(str)`\r\n  * `contains(str)`\r\n  * `matches(regExp)`\r\n\r\n\r\n## String Iteration\r\n\r\nIterizerJs provides a `chars()` method for iterating strings which can be used as follows:\r\n\r\n```\r\n// produces the string 'a,b,c'\r\n'abc'.chars().join();\r\n```\r\n\r\n## Other helpful methods\r\n\r\nA number of other helpful methods like `join()`, `toArray()`, `sum()` & `product()` are also provided. At any time, the definitive list of available methods can be found by scanning the [source code](https://github.com/dchambers/iterizerjs/blob/master/lib/iterizer.js).\r\n","google":"UA-55018454-1","note":"Don't delete this file! It's used internally to help with page regeneration."}